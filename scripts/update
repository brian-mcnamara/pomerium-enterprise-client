#!/bin/bash
set -euo pipefail

_scripts_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
_root_dir="$(dirname "$_scripts_dir")"
_deps_dir="$_root_dir/protos"

function download() {
  local _url="$1"
  local _dst="$2"

  echo "downloading $_url to $_dst"
  curl \
    --silent \
    --compressed \
    --fail \
    --location \
    --time-cond "$_dst" \
    --output "$_dst" \
    "$_url"
}

function download_all() {
  if [ "$(uname -s)" == "Darwin" ]; then
    download "https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protoc-21.5-osx-universal_binary.zip" "$_deps_dir/protoc.zip"
  else
    download "https://github.com/protocolbuffers/protobuf/releases/download/v21.5/protoc-21.5-linux-x86_64.zip" "$_deps_dir/protoc.zip"
  fi
  (cd "$_deps_dir" && unzip -o protoc.zip bin/protoc)
}

function join_by() {
  local IFS="$1"
  shift
  echo "$*"
}

go run github.com/stormcat24/protodep@v0.1.7 up -f
download_all

_proto_files=(
  activity_log.proto
  audit_svc.proto
  databroker_svc.proto
  policy.proto
  routes.proto
  settings.proto
  namespaces.proto
  users.proto
  key_chain.proto
  console_config.proto
  report.proto
  devices.proto
  external_data_sources.proto
  tsdb.proto
)

(
  cd "$_root_dir"

  echo "generating pomerium-console protobuf code"
  protoc \
    --plugin="protoc-gen-doc=$_scripts_dir/protoc-gen-doc" \
    --plugin="protoc-gen-go=$_scripts_dir/protoc-gen-go" \
    -I "$_deps_dir/ext" \
    --doc_out=./ \
    --doc_opt=.template.mustache,API.md \
    --go_out="plugins=grpc,paths=source_relative:go/pb" \
    --proto_path="$_deps_dir/pomerium" \
    $(find $_deps_dir/pomerium -name '*.proto')
)
